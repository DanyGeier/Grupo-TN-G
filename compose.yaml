# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    environment:
      - GRPC_SERVER_HOST=server
      - GRPC_SERVER_PORT=9095
    ports:
      - 5000:5000
    depends_on:
      - server
  server:
    build:
      context: ./backend/users
      dockerfile: Dockerfile
    ports:
      - 9095:9095
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/bd_empuje_comunitario?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: grupog
      SPRING_DATASOURCE_PASSWORD: grupog123
      SPRING_MAIL_HOST: mailpit
      SPRING_MAIL_PORT: 1025
      SPRING_MAIL_USERNAME: "user123"
      SPRING_MAIL_PASSWORD: "admin"
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH: false
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE: false
    depends_on:
      db:
        condition: service_healthy

  # The commented out section below is an example of how to define a PostgreSQL
  # database that your application can use. `depends_on` tells Docker Compose to
  # start the database before your application. The `db-data` volume persists the
  # database data between container restarts. The `db-password` secret is used
  # to set the database password. You must create `db/password.txt` and add
  # a password of your choosing to it before running `docker-compose up`.
  #     depends_on:
  #       db:
  #         condition: service_healthy
  db:
    image: mysql:8.0
    restart: always
    container_name: grupo-tn-g-mysql
    environment:
      MYSQL_ROOT_PASSWORD: root123456
      MYSQL_DATABASE: bd_empuje_comunitario
      MYSQL_USER: grupog
      MYSQL_PASSWORD: grupog123
    ports:
      - 3306:3306
    volumes:
      #- ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - mysql-data:/var/lib/mysql
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -uroot -p$${MYSQL_ROOT_PASSWORD} || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 3
  mailpit:
    image: axllent/mailpit
    container_name: mailpit
    ports:
      - 1025:1025
      - 8025:8025
    environment:
      - MP_SMTP_AUTH_ACCEPT_ANY=1
      - MP_SMTP_AUTH_ALLOW_INSECURE=1
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

volumes:
  mysql-data:


